<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>校招总结</title>
      <link href="/2021/10/18/faceReault/"/>
      <url>/2021/10/18/faceReault/</url>
      
        <content type="html"><![CDATA[<h1 id="提前批"><a href="#提前批" class="headerlink" title="提前批"></a>提前批</h1><p>由于一直在考研和工作两方面纠结,五月份才决定工作。完美错过春招实习导致秋招提前批<br>我的简历属性为双非本 无实习。 确实因为这点简历过的寥寥无几</p><p><img src="/2021/10/18/faceReault/tqp.jpg"></p><p>最直观的感受大厂确实不咋卡简历.中大厂卡的挺严格</p><p>第一场面试</p><p><img src="/2021/10/18/faceReault/jd.jpg"></p><p>当时状态就是准备了两个月的散装八股文和一些easy难度的lc题就开始面试了<br>不得不说面试体验很不错虽然八股记得不太准确但是面试小哥也给我过了 hhh<br>后面就是复试+HR面最后进池子排序了..  最后意料之中排序排挂了。 现在意识到<br>实习经历在综合面评还是有一定比重的。但是没办法 都已经八月中序了找实习不太来得及<br>只能硬着头皮上了。</p><p>最终呢7-8月底就拿到了端点的offer 但是hr说是实习offer  考虑到不一定转正就给拒绝了。</p><h1 id="正式秋招"><a href="#正式秋招" class="headerlink" title="正式秋招"></a>正式秋招</h1><p>秋招情况更是一片红海,简历挂一半笔试挂一半.最后秋招应该是有10~20家给了面试机会</p><p><img src="/2021/10/18/faceReault/zsp.jpg"></p><p>其中八月份的时候好未来是面试最顺利的，一下午走完三场面试和HR也谈了给完offer提前<br>实习的事情。本来拿完这个准备躺平了 然 八月底就出台政策K12业务被砍和双减政策<br>我就意识到这个offer也要凉，然后8月底开始海投简历 此时已经错过最佳时间了<br>毕竟金九银十现在已经是金七银八了。简历过的寥寥无几…</p><p>其中一个转机就是字节跳动青训营,里面学习完之后确实在二面聊项目的时候不是简单的CRUD了<br>可以谈谈数据上报前端监控CI/CD自动部署这些了 面试通过率直线提高</p><p><img src="/2021/10/18/faceReault/dance.jpg"></p><p>由于学校线下实习的情况 emmm 这个课不太顺利只上了一半 也就是在结束的那周百度<br>在池子里把我捞出来面试了！   当时心情五味杂陈发了pyq的那张图</p><p><img src="/2021/10/18/faceReault/bb.jpg"></p><p>不出所料艰难面完,再次进池子…</p><hr><p>后续的话走完了个中大厂流程秋招应该就这样结束了。</p><blockquote><p>7.21~10.18</p></blockquote><p>一共投了70+简历<br>    简历挂了30<br>        笔试挂了20<br>            走完流程4家<br>                意向书2家</p><p><img src="/2021/10/18/faceReault/jsy.jpg"><br><img src="/2021/10/18/faceReault/yy.jpg"></p><blockquote><p>未完待续</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>newCli</title>
      <link href="/2021/09/23/newCli/"/>
      <url>/2021/09/23/newCli/</url>
      
        <content type="html"><![CDATA[<h1 id="问题驱动"><a href="#问题驱动" class="headerlink" title="问题驱动"></a>问题驱动</h1><blockquote><ol><li>创建了文件夹 （项目名）</li><li>创建了 index.js</li><li>创建了 Package.json</li><li>安装依赖</li></ol></blockquote><h1 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h1><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">.</span>创建文件夹利用fs创建文件夹fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>创建了 index<span class="token punctuation">.</span>js<span class="token keyword">const</span> template <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../template/index.ejs'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>将index模板抽离出来<span class="token punctuation">.</span>通过fs<span class="token punctuation">.</span>readFileSync读出<span class="token number">3</span><span class="token punctuation">.</span>创建了 Package<span class="token punctuation">.</span>jsonfs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token function">getRootPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/package.json"</span><span class="token punctuation">,</span> <span class="token function">createPackageTemplate</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>同上将<span class="token keyword">package</span>模板抽离出来<span class="token number">4</span><span class="token punctuation">.</span>安装依赖包<span class="token function">execa</span><span class="token punctuation">(</span><span class="token string">'npm i'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>cwd<span class="token punctuation">:</span> <span class="token function">getRootPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>通过execa包建立用户交互界面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模板选择-ejs"><a href="#模板选择-ejs" class="headerlink" title="模板选择(ejs)"></a>模板选择(ejs)</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//indexTemplate.js</span><span class="token keyword">import</span> ejs <span class="token keyword">from</span> <span class="token string">"ejs"</span><span class="token punctuation">;</span><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span><span class="token keyword">import</span> prettier <span class="token keyword">from</span> <span class="token string">"prettier"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> fileURLToPath <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"url"</span><span class="token punctuation">;</span><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createIndexTemplate</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//文件路径处理</span>  <span class="token keyword">const</span> __dirname <span class="token operator">=</span> <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//读取模板</span>  <span class="token keyword">const</span> template <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../template/index.ejs'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//config参数为用户交互界面输入参数</span>  <span class="token keyword">const</span> code <span class="token operator">=</span> ejs<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    packageName<span class="token punctuation">:</span> config<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>    port<span class="token punctuation">:</span> config<span class="token punctuation">.</span>port<span class="token punctuation">,</span>    router<span class="token punctuation">:</span> config<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'koaRouter'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token keyword">static</span><span class="token punctuation">:</span> config<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'koaStatic'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  prettier<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    parser<span class="token punctuation">:</span> <span class="token string">'babel'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> code<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//packageTemplate.js</span><span class="token keyword">import</span> ejs <span class="token keyword">from</span> <span class="token string">"ejs"</span><span class="token punctuation">;</span><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span><span class="token keyword">import</span> prettier <span class="token keyword">from</span> <span class="token string">"prettier"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> fileURLToPath <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"url"</span><span class="token punctuation">;</span><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createPackageTemplate</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> __dirname <span class="token operator">=</span> <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">const</span> template <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../template/package.ejs'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> code <span class="token operator">=</span> ejs<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    packageName<span class="token punctuation">:</span> config<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>    port<span class="token punctuation">:</span> config<span class="token punctuation">.</span>port<span class="token punctuation">,</span>    router<span class="token punctuation">:</span> config<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'koaRouter'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token keyword">static</span><span class="token punctuation">:</span> config<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'koaStatic'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  prettier<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    parser<span class="token punctuation">:</span> <span class="token string">'json'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> code<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ejs模板"><a href="#ejs模板" class="headerlink" title="ejs模板"></a>ejs模板</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//index.ejs</span>模板语法通过控制<span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span>控制是否存在<span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>router<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa-router"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa-static"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>router<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"hello koa-setup-heihei"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">=</span> port <span class="token operator">%</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Open server localhost: &lt;%= port %>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//package.ejs</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"teach-koa-setup"</span><span class="token punctuation">,</span>    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>    <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"rm -rf ./haha &amp;&amp; node index.js"</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>    <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>    <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token string">"koa"</span><span class="token punctuation">:</span> <span class="token string">"^2.13.1"</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>router<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span><span class="token punctuation">,</span>      <span class="token string">"koa-router"</span><span class="token punctuation">:</span> <span class="token string">"^10.1.1"</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>router<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span><span class="token punctuation">,</span>      <span class="token string">"koa-static"</span><span class="token punctuation">:</span> <span class="token string">"^5.0.0"</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用户交互界面的处理"><a href="#用户交互界面的处理" class="headerlink" title="用户交互界面的处理"></a>用户交互界面的处理</h2><p>利用inquirer包 进行用户面板的生成</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> question <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> inquirer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>type<span class="token punctuation">:</span> <span class="token string">'input'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'packageName'</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'Set package name'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>type<span class="token punctuation">:</span> <span class="token string">'number'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'port'</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'Set port number'</span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">8080</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>type<span class="token punctuation">:</span> <span class="token string">'checkbox'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'middleware'</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'Choose middleware you want to use'</span><span class="token punctuation">,</span> choices<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'koaStatic'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'koaRouter'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成全局控制命令"><a href="#生成全局控制命令" class="headerlink" title="生成全局控制命令"></a>生成全局控制命令</h2><p>入口文件index.js中顶层声明<br>#!/usr/bin/env node</p><p>在命令行中输入npm link 建立全局关联.即可全局使用cli</p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据上报</title>
      <link href="/2021/09/12/dataUpload/"/>
      <url>/2021/09/12/dataUpload/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建前端监控系统"><a href="#搭建前端监控系统" class="headerlink" title="搭建前端监控系统"></a>搭建前端监控系统</h1><h2 id="监控目标"><a href="#监控目标" class="headerlink" title="监控目标"></a>监控目标</h2><blockquote><p>javascript层</p></blockquote><p>JS执行错误<br>使用window.addEventListener监听error事件，获取事件对象，取出对应的值</p><p>Promise异常<br>Promise异常是通过监听unhandledrejection事件，获取事件对象～</p><p>接口错误<br>在模拟接口成功或者异常时，我们可以在webpack中的devServer加入before，做一下拦截处理</p><p>页面空白<br>采用取点的形式，然后看每个点上是否有对应的标签（可配置一下阈值，看多少个点更合适），如果点对应的标签都是body或者html的话，那么就可以认为此页面是空白的</p><blockquote><p>用户体验层</p></blockquote><p>加载时间 —-&gt; 各个阶段的加载时间<br>TTFB(Time To Firstbyte)  —-&gt; 首字节时间<br>指浏览器发起第一个请求到数据返回第一个字节所消耗的时间，这个时间包括了网络请求时间、后端处理时间</p><p>FP（First Paint） —–&gt; 首次绘制<br>首次绘制包括了任何用户自定义的背景绘制，它是将第一个像素点绘制到屏幕的时刻</p><p>FCP（First Content Paint） —-&gt; 首次内容绘制<br>首次内容绘制是浏览器将第一个DOM渲染到屏幕的时间，可以是任何文本、图像、SVG等的时间</p><blockquote><p>业务层面</p></blockquote><p>PV(Page View)：页面浏览量或点击量</p><p>UV()：指访问某个站点的不同ip地址的人数</p><p>页面停留时间：用户在每一个页面的停留时间</p><h2 id="埋点方案"><a href="#埋点方案" class="headerlink" title="埋点方案"></a>埋点方案</h2><blockquote><p>代码埋点<br>嵌入到代码中进行埋点，比如点击事件</p></blockquote><blockquote><p>无痕埋点<br>前端的任意一个事件都被绑定一个标识，所有事件都被记录下来；通过定期上传记录文件，<br>配合文件解析，解析出来我们想要的数据，并生成可视化报告供专业人员分析</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端动画</title>
      <link href="/2021/08/26/anaimation/"/>
      <url>/2021/08/26/anaimation/</url>
      
        <content type="html"><![CDATA[<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><p>动画是通过快速连续排列彼此差异极⼩的连续图像来制造运动错觉和变化错觉的过程</p><h1 id="动画原理"><a href="#动画原理" class="headerlink" title="动画原理"></a>动画原理</h1><p>无论动画多么简单，始终需要定义两个基本状态，即开始状态和结束状态。<br>没有它们，我们将无法定义插值状态，从而填补了两者之间的空白。</p><p>帧：连续变换的多张画面，其中的每一幅画面都是一帧。<br>帧率：用于度量一定时间段内的帧数，通常的测量单位是FPS（frame per second）。<br>帧率与人眼：一般每秒10-12帧人会认为画面是连贯的，这个现象称为视<br>觉暂留。对于一些电脑动画和游戏来说低于30FPS会感受到明显卡顿，目<br>前主流的屏幕、显卡输出为60FPS，效果会明显更流畅。</p><h1 id="动画实现方式"><a href="#动画实现方式" class="headerlink" title="动画实现方式"></a>动画实现方式</h1><blockquote><p>补间动画（关键帧动画）：<br>传统动画，主画师绘制关键帧，交给清稿部⻔，清稿部⻔的补间动画师补充关键帧进⾏交付。<br>（类⽐到这⾥，补间动画师由浏览器来担任，如keyframe，transition）<br>逐帧动画（Frame By Frame）：<br>从词语来说意味着全⽚每⼀帧逐帧都是纯⼿绘。（如steps实现雪碧图）</p></blockquote><h1 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h1><p>Transition API（过渡动画）<br>dom加载完成或class发生变化时触发。</p><p>transition-property<br>指定哪个或哪些 CSS 属性用于过渡。<br>transition-duration<br>指定过渡的时长。<br>transition-timing-function<br>指定一个函数，定义属性值怎么变化。<br>transition-delay<br>指定延迟，即属性开始变化时与过渡开始发生时之间的时长。</p><h2 id="keyframe实现动画"><a href="#keyframe实现动画" class="headerlink" title="keyframe实现动画"></a>keyframe实现动画</h2><p>关键帧 @keyframes at-rule 规则通过在动画序列中定义关键帧<br>（或waypoints）的样式来控制CSS动画序列中的中间步骤。和 转换 transition<br>相比，关键帧 keyframes 可以控制动画序列的中间步骤。</p><h2 id="steps实现逐帧动画"><a href="#steps实现逐帧动画" class="headerlink" title="steps实现逐帧动画"></a>steps实现逐帧动画</h2><p><img src="/a.jpg"></p><h2 id="css动画优缺点"><a href="#css动画优缺点" class="headerlink" title="css动画优缺点"></a>css动画优缺点</h2><p>优点：简单、高效 声明式的 不依赖于主线程，采用硬件加速（GPU） 简<br>单的控制keyframe animation播放和暂停。<br>缺点：不能动态修改或定义动画内容 不同的动画无法实现同步 多个动画彼<br>此无法堆叠。<br>适用场景：简单的h5活动/宣传页。<br>推荐库：animation.css、shake.css等。</p><h1 id="SVG动画"><a href="#SVG动画" class="headerlink" title="SVG动画"></a>SVG动画</h1><p>svg是基于XML的矢量图形描述语言，它可以与CSS和JS较好的配合，实现<br>svg动画通常有三种方式：SMIL、JS、CSS</p><h2 id="SVG动画优缺点"><a href="#SVG动画优缺点" class="headerlink" title="SVG动画优缺点"></a>SVG动画优缺点</h2><p>优点：通过矢量元素实现动画，不同的屏幕下均可获得较好的清晰度。<br>可以实现一些特殊的效果：描字，形变，墨水扩散等。<br>缺点：使用方式较为复杂，过多使用可能会带来性能问题</p><h1 id="JS动画"><a href="#JS动画" class="headerlink" title="JS动画"></a>JS动画</h1><p>JS可以实现复杂的动画，也可以操作canvas动画API上进行绘制。</p><h1 id="动画如何选择？"><a href="#动画如何选择？" class="headerlink" title="动画如何选择？"></a>动画如何选择？</h1><p>CSS优点： - 浏览器会对CSS3动画做一些优化，导致CSS3动画性能上稍有优 势（新建一个图层来跑动画）。</p><ul><li>CSS3动画的代码相对简单。<br>CSS缺点： - 动画控制上不够灵活。 - 兼容性不佳。 - 部分动画无法实现（视差效果、滚动动画）</li></ul><p>JS优点： - 使用灵活，同样在定义一个动画的keyframe序列时，可以根据不 同的条件调节若干参数（JS动画函数）改变动画方式。（CSS会有<br>非常多的代码冗余） - 对比与CSS的keyframe粒度更粗，css本身的时间函数是有限的，<br>这块JS都可做弥补。</p><ul><li><p>CSS很难做到两个以上的状态转化（要么使用关键帧，要么需要<br>多个动画延时触发，再想到要对动画循环播放或暂停倒序等，复杂<br>度极高）。<br>JS缺点： - 使用到JS运行时，调优方面不如CSS简单，CSS调优方式固定。</p></li><li><p>对于性能和兼容性较差的浏览器，CSS可以做到优雅降级，而JS<br>需要额外代码兼容。</p></li><li><p>当您为 UI 元素采用较小的独立状态时，使用 CSS。 - 在需要对动画进行大量控制时，使用 JavaScript。 - 在特定的场景下可以使用SVG，可以使用CSS或JS去操作SVG变化。</p></li></ul><h1 id="动画的优化"><a href="#动画的优化" class="headerlink" title="动画的优化"></a>动画的优化</h1><blockquote><p>性能角度</p></blockquote><p>页面渲染的一般过程为JS &gt; CSS &gt; 计算样式 &gt; 布局 &gt; 绘制 &gt; 渲染层合<br>并。<br>其中，Layout(重排)和Paint(重绘)是整个环节中最为耗时的两环，所以<br>我们尽量避免这两个环节。从性能方面考虑，最理想的渲染流水线是<br>没有布局和绘制环节的，只需要做渲染层的合并即可。</p><blockquote><p>样式替换</p></blockquote><p>在实际的应用里，最为简单的一个注意点就是，触发动画的开始不要<br>用display:none属性值，因为它会引起Layout、Paint环节，通过切换类<br>名就已经是一种很好的办法。<br>translate属性值来替换top/left/right/bottom的切换，scale属性值替换<br>width/height，opacity属性替换display/visibility等等</p><blockquote><p>硬件加速</p></blockquote><p>CSS3 硬件加速又叫做 GPU 加速，是利用 GPU 进行渲染，减少 CPU 操<br>作的一种优化方案。由于 GPU 中的 transform 等 CSS 属性不会触发<br>repaint，所以能大大提高网页的性能。<br>CSS 中的以下几个属性能触发硬件加速：</p><ol><li>transform</li><li>opacity</li><li>filter</li><li>Will-change</li></ol><blockquote><p>案例分析<br>下面让我们来看一个动画效果，在该动画中包含了几个堆叠在一起的球并让它们沿相同路径移动。最简单的方式就是实时调整它们的 left 和 top 属性。我们可以使用JavaScript，但我们将使用CSS动画来替代。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>ball<span class="token operator">-</span>running <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  animation<span class="token punctuation">:</span> run<span class="token operator">-</span>around 4s infinite<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>@keyframes run<span class="token operator">-</span>around <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token number">0</span><span class="token operator">%</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    top<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    left<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token number">25</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    top<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    left<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token number">50</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    top<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    left<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token number">75</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    top<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    left<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击“Start Animation”按钮之后，你会隐约感觉到动画并不是那么流畅，即使使用电脑上的浏览器也会有些卡顿，更不要提在移动端达到 60fps 的流畅效果了。为了解决这个问题，我们可以使用 CSS transform 中的 translate() 来替代 top 和 left：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>ball<span class="token operator">-</span>running <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  animation<span class="token punctuation">:</span> run<span class="token operator">-</span>around 4s infinite<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>@keyframes run<span class="token operator">-</span>around <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token number">0</span><span class="token operator">%</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    transform<span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token number">25</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    transform<span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>200px<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token number">50</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    transform<span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>200px<span class="token punctuation">,</span> 200px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token number">75</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    transform<span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> 200px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在动画看起来流畅多了。这是为什么呢？这是因为 transform 属性不会触发浏览器的 repaint，而 left 和 top 则会一直触发 repaint</p><blockquote><p>那么，为什么 transform 没有触发 repaint 呢？<br>transform 动画由GPU控制，支持硬件加速，并不需要软件方面的渲染。</p></blockquote><p>浏览器接收到页面文档后，会将文档中的标记语言解析为DOM树。DOM树和CSS结合后形成浏览器构建页面的渲染树。渲染树中包含了大量的渲染元素，每一个渲染元素会被分到一个图层中，每个图层又会被加载到GPU形成渲染纹理，而图层在GPU中 transform 是不会触发 repaint 的，这一点非常类似3D绘图功能，最终这些使用 transform 的图层都会由独立的合成器进程进行处理。</p><blockquote><p>解决2D transform 起始和结束的两次rapaint</p></blockquote><p>利用3D transform</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>example1 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  transform<span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span>example2 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  transform<span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 动画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/2021/08/25/adaterPartern/"/>
      <url>/2021/08/25/adaterPartern/</url>
      
        <content type="html"><![CDATA[<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p>解决两个软件实体间接口不兼容问题，不需要改变已有接口，就可以使它们协同工作</p><h1 id="设计模式使用前后对比"><a href="#设计模式使用前后对比" class="headerlink" title="设计模式使用前后对比"></a>设计模式使用前后对比</h1><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//使用前</span>    <span class="token keyword">const</span> aMap <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        show<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"amap"</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> bMap <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        display<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bmap"</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> renderMap <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">"aMap"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            type<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">"bMap"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            type<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用后</span>     <span class="token keyword">const</span> aMap <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        show<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"amap"</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> bMap <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        display<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bmap"</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> Badapter <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        show<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bMap<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> readerMap <span class="token operator">=</span> <span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>show <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">readerMap</span><span class="token punctuation">(</span>aMap<span class="token punctuation">)</span>    <span class="token function">readerMap</span><span class="token punctuation">(</span>Badapter<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用适配器模式后只需增加适配器函数即可实现解耦作用</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2021/08/25/decidePartern/"/>
      <url>/2021/08/25/decidePartern/</url>
      
        <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>定义一系列算法,把它们一个个封装起来,并且使它们之间可以相互替换,<br>把看似毫无关联的代码提取封装、复用、使之等容易理解和拓展</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>要完成一件事，有不同的策略、如绩效计算 表单验证规则</p><h1 id="应用设计模式前后对比"><a href="#应用设计模式前后对比" class="headerlink" title="应用设计模式前后对比"></a>应用设计模式前后对比</h1><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//无设计模式</span><span class="token keyword">const</span> cacluteBons <span class="token operator">=</span> <span class="token punctuation">(</span>level<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"s"</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> salary<span class="token operator">*</span><span class="token number">4</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"s"</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> salary<span class="token operator">*</span><span class="token number">4</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"s"</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> salary<span class="token operator">*</span><span class="token number">4</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">cacluteBons</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">)</span><span class="token function">cacluteBons</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//使用策略模式</span><span class="token keyword">const</span> strategies <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    s<span class="token punctuation">:</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> salary<span class="token operator">*</span><span class="token number">4</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    a<span class="token punctuation">:</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> salary<span class="token operator">*</span><span class="token number">3</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> salary<span class="token operator">*</span><span class="token number">2</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> cacluete <span class="token operator">=</span> <span class="token punctuation">(</span>level<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> strategies<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">cacluteBons</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">)</span><span class="token function">cacluteBons</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用策略表维护计算规则，不会影响js函数内逻辑,甚至可以让不懂编码的同事进行拓展策略表<br>将业务逻辑与策略关系解耦。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化</title>
      <link href="/2021/08/24/frendWebpack/"/>
      <url>/2021/08/24/frendWebpack/</url>
      
        <content type="html"><![CDATA[<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><blockquote><p>前端工程化实际上是软件工程中的一种方法论<br>软件工程：想尽一次办法规避软件项目的风险,并能更快、更好的完成软件项目的交付和维护。</p></blockquote><h2 id="演进过程"><a href="#演进过程" class="headerlink" title="演进过程"></a>演进过程</h2><blockquote><p>瀑布模型-&gt;敏捷模型-&gt;DevOps</p></blockquote><p>瀑布模型：先设计完后开发在测试最后部署<br>敏捷模型：按需求进行开发测试将全部需求都解决在部署<br>DevOps: 将每个需求进行开发测试完后部署，这样可以提高开发效率</p><p>交付周期越长,变化的可能性就越大,项目可能面临的风险概率就越高。</p><h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><p>前端工程化是一种通过规范化、模块化、自动化等手段,提高前端项目在研发、运维阶段的效率和质量</p><h3 id="规范化"><a href="#规范化" class="headerlink" title="规范化"></a>规范化</h3><p>沉淀研发流程的各个环节标准规范,统一研发流程和规范,为模块化和自动化提供可能性。</p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>将各项功能基于独立的模块去拆分开发,尽可能的做到模块级别的复用,从而大大提高整体效率<br>和降低研发成本</p><h3 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h3><p>基于定义的研发流程,建立一套自动化流水线,当特定动作发生时,自动触发流水线执行CI/CD任务</p><h2 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI/CD"></a>CI/CD</h2><p>它是一种工程化方法论,即通过自动化的手段、实现能持续的对项目进行构建、交付、部署，<br>从而达成高效率、高质量的交付目标。</p><blockquote><p>前端工程化的目的：降本提效 保证质量</p></blockquote><p><img src="/2021/08/24/frendWebpack/webpakc.jpg"></p><p><img src="/2021/08/24/frendWebpack/cli.jpg"></p><h2 id="脚手架前置准备"><a href="#脚手架前置准备" class="headerlink" title="脚手架前置准备"></a>脚手架前置准备</h2><p><img src="/2021/08/24/frendWebpack/jsj.jpg"></p><h3 id="前置检测"><a href="#前置检测" class="headerlink" title="前置检测"></a>前置检测</h3><p><img src="/2021/08/24/frendWebpack/test.jpg"></p><h3 id="CI-CD-1"><a href="#CI-CD-1" class="headerlink" title="CI/CD"></a>CI/CD</h3><p><img src="/2021/08/24/frendWebpack/CI.jpg"></p><h2 id="构建方案-Bundle和NoBundle"><a href="#构建方案-Bundle和NoBundle" class="headerlink" title="构建方案-Bundle和NoBundle"></a>构建方案-Bundle和NoBundle</h2><p>webpakc和vite</p><p><img src="/2021/08/24/frendWebpack/p.jpg"></p><h2 id="前端工程化演变"><a href="#前端工程化演变" class="headerlink" title="前端工程化演变"></a>前端工程化演变</h2><p><img src="/2021/08/24/frendWebpack/qq.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用工具站</title>
      <link href="/2021/08/22/usualSite/"/>
      <url>/2021/08/22/usualSite/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CSS</p></blockquote><p><a href="https://css-tricks.com/almanac/">https://css-tricks.com/almanac/</a><br>CSS在线</p><blockquote><p>chrome</p></blockquote><p><a href="https://css-tricks.com/almanac/">https://css-tricks.com/almanac/</a><br>调试技巧</p><blockquote><p>UI</p></blockquote><p><a href="https://logomakr.com/">https://logomakr.com/</a><br>login设计<br><a href="https://excalidraw.com/">https://excalidraw.com/</a><br>在线白板<br><a href="https://www.tailwindcss.cn/docs/utility-first">https://www.tailwindcss.cn/docs/utility-first</a><br>UI库</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nextTick</title>
      <link href="/2021/08/17/nextTick/"/>
      <url>/2021/08/17/nextTick/</url>
      
        <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      msg<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token number">3</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    msg <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段脚本执行我们猜测1000m后会依次打印：1、2、3。但是实际效果中，只会输出一次：3。为什么会出现这样的情况？我们来一探究竟</p><blockquote><p>因为Vue的事件机制是通过事件队列来调度执行，会等主进程执行空闲后进行调度，所以先回去等待所有的进程执行完成之后再去一次更新。这样的性能优势很明显，比如：</p></blockquote><p>现在有这样的一种情况，mounted的时候test的值会被++循环执行1000次。 每次++时，都会根据响应式触发setter-&gt;Dep-&gt;Watcher-&gt;update-&gt;run。 如果这时候没有异步更新视图，那么每次++都会直接操作DOM更新视图，这是非常消耗性能的。 所以Vue实现了一个queue队列，在下一个Tick（或者是当前Tick的微任务阶段）的时候会统一执行queue中Watcher的run。同时，拥有相同id的Watcher不会被重复加入到该queue中去，所以不会执行1000次Watcher的run。最终更新视图只会直接将test对应的DOM的0变成1000。 保证更新视图操作DOM的动作是在当前栈执行完以后下一个Tick（或者是当前Tick的微任务阶段）的时候调用，大大优化了性能。</p><blockquote><p>应用场景<br>1、Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中</p></blockquote><p>2、当项目中你想在改变DOM元素的数据后基于新的dom做点什么，对新DOM一系列的js操作都需要放进Vue.nextTick()的回调函数中；通俗的理解是：更改数据后当你想立即使用js操作新的视图的时候需要使用它</p><blockquote><p>注意：nextTick在微队列顺序</p></blockquote><p>1.如果数据发生改变则nextTick在微队列首部插入</p><p>2.如果数据没法说改变则nextTick视为promise对象</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS优先级</title>
      <link href="/2021/08/16/cssPiovit/"/>
      <url>/2021/08/16/cssPiovit/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS优先级规则"><a href="#CSS优先级规则" class="headerlink" title="CSS优先级规则"></a>CSS优先级规则</h2><p>1.css选择规则的权值不同时，权值高的优先；<br>2.css选择规则的权值相同时，后定义的规则优先；<br>3.css属性后面加 !important 时，无条件绝对优先；</p><h2 id="权值计算"><a href="#权值计算" class="headerlink" title="权值计算"></a>权值计算</h2><p>第一等级：代表 内联样式，如 style=””，权值为 1,0,0,0；</p><p>第二等级：代表 ID选择器，如 #id=””, 权值为 0,1,0,0；</p><p>第三等级：代表 calss | 伪类 | 属性 选择器，如 .class | :hover,:link,:target | [type], 权值 0,0,1,0；</p><p>第四等级：代表 标签 | 伪元素 选择器，如 p | ::after, ::before, ::fist-inline, ::selection, 权值 0,0,0,1；</p><p>此外，通用选择器（*），子选择器（&gt;）， 相邻同胞选择器（+）等选择器不在4等级之内，所以它们的权值都为 0,0,0,0</p><h2 id="权值比较"><a href="#权值比较" class="headerlink" title="权值比较"></a>权值比较</h2><p>当两个权值进行比较的时候，是从高到低逐级将等级位上的权重值<br>低等级的选择器，个数再多也不会越等级超过高等级的选择器的优先级的</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>        #parent p <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> background<span class="token operator">-</span>color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span>a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">.</span>d<span class="token punctuation">.</span>e<span class="token punctuation">.</span>f<span class="token punctuation">.</span>g<span class="token punctuation">.</span>h<span class="token punctuation">.</span>i<span class="token punctuation">.</span>j<span class="token punctuation">.</span>k p<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> background<span class="token operator">-</span>color<span class="token punctuation">:</span> green<span class="token punctuation">;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"parent"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"a b c d e f g h i j k"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>xxxx<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述颜色为红色</p><blockquote><p>先从高等级进行比较，高等级相同时，再比较低等级的，以此类推</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue生命周期</title>
      <link href="/2021/08/13/vueLong/"/>
      <url>/2021/08/13/vueLong/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Vue实例从创建到销毁的过程，就是Vue的生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom – &gt; 渲染、更新–&gt;渲染、卸载等一系列过程，我们称这是Vue的生命周期。</p><h2 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h2><blockquote><p>data 和 $el 都没有初始化 全部为 undefined</p></blockquote><h2 id="created"><a href="#created" class="headerlink" title="created"></a>created</h2><blockquote><p>data 初始化完成，但 $el 没有初始化</p></blockquote><h2 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h2><blockquote><p>data 和 $el 均已存在，但 DOM 为虚拟DOM 仍未完全加载 eg：</p></blockquote><h2 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h2><blockquote><p>data 和 $el 均已存在，并且 DOM 加载完成 ，完成挂载</p></blockquote><h2 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h2><blockquote><p>渲染完成，并监测到data发生变化，在变化的数据重新渲染视图之前会触发，这也是重新渲染之前最后修改数据的机会</p></blockquote><h2 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h2><blockquote><p>监测到data发生变化，并完成渲染更新视图之后触发</p></blockquote><h2 id="beforeDestory"><a href="#beforeDestory" class="headerlink" title="beforeDestory"></a>beforeDestory</h2><blockquote><p>实例销毁之前调用 ， 实例仍然完全可用</p></blockquote><h2 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h2><blockquote><p>实例销毁后调用。调用后，实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p></blockquote><h2 id="第一次页面加载会触发哪几个钩子"><a href="#第一次页面加载会触发哪几个钩子" class="headerlink" title="第一次页面加载会触发哪几个钩子"></a>第一次页面加载会触发哪几个钩子</h2><p>beforeCreate, created, beforeMount, mounted </p><h2 id="每个周期具体适合哪些场景"><a href="#每个周期具体适合哪些场景" class="headerlink" title="每个周期具体适合哪些场景"></a>每个周期具体适合哪些场景</h2><p>beforeCreate 可以在此时加一些loading效果，在created时进行移除</p><p>created 需要异步请求数据的方法可以在此时执行，完成数据的初始化</p><p>mounted 当需要操作dom的时候执行，可以配合$.nextTick 使用进行单一事件对数据的更新后更新dom</p><p>updated 当数据更新需要做统一业务处理的时候使用</p><h2 id="created和mounted的区别"><a href="#created和mounted的区别" class="headerlink" title="created和mounted的区别"></a>created和mounted的区别</h2><p>created:在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。</p><p>mounted:在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。(调用第三方插件可以放在mounted里边)</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>content-tpye</title>
      <link href="/2021/08/11/contentTpye/"/>
      <url>/2021/08/11/contentTpye/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>Content-Type（内容类型），一般是指网页中存在的 Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件.</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>axios发送请求时params和data的区别</p><ol><li>params是添加到url的请求字符串中的，用于get请求。</li><li>data是把json对象添加到请求体（body）中的， 用于post请求。</li><li>get请求只能传query参数，query参数都是拼在请求地址上的</li><li>post可以传body和query两种形式的参数</li></ol><h2 id="FormData与RequestPayload"><a href="#FormData与RequestPayload" class="headerlink" title="FormData与RequestPayload"></a>FormData与RequestPayload</h2><p><img src="/2021/08/11/contentTpye/formData.jpg"></p><p><img src="/2021/08/11/contentTpye/request.jpg"></p><blockquote><p>俩种格式对应的不同content-type</p></blockquote><p>POST /some-path HTTP/1.1<br>Content-Type: application/json</p><p>{ “foo” : “bar”, “name” : “John” }</p><p>POST /some-path HTTP/1.1<br>Content-Type: application/x-www-form-urlencoded</p><p>foo=bar&amp;name=John</p><blockquote><p>传统Form表单对应 application/x-www-form-urlencoded、Form Data</p></blockquote><blockquote><p>axios对应 application/json 、 request payload</p></blockquote><h2 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h2><blockquote><p>form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）</p></blockquote><p>浏览器用x-www-form-urlencoded的编码方式把form数据转换成一个字串（name1=value1&amp;name2=value2…），然后把这个字串append到url后面，用?分割，加载这个新的url<br>此时数据格式为Form Date</p><h2 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h2><p>浏览器用application/json的编码方式把form数据转换成一个JSON字符串</p><blockquote><p>注意 axios 会根据穿的是字符串还是对象自动切换格式</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回流与重绘</title>
      <link href="/2021/08/09/reflow/"/>
      <url>/2021/08/09/reflow/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>回流(reflow/layout)：将可见DOM节点以及它对应的样式结合起来完成了渲染树的构建，可是我们还需要计算它们在设备视口内的确切位置和大小，这个计算的阶段就是回流。</p></blockquote><blockquote><p>重绘(repaint): 通过回流阶段，我们知道了哪些节点是可见的，以及可见节点的样式和具体的几何信息，将渲染树的每个节点都转换为屏幕上的实际像素，这个阶段就叫做重绘。</p></blockquote><blockquote><p>注意:一些通过css进行隐藏的节点。比如display:none。注意，利用visibility和opacity隐藏的节点，还是会显示在渲染树上的。只有display:none的节点才不会显示在渲染树上。</p></blockquote><h2 id="发生阶段"><a href="#发生阶段" class="headerlink" title="发生阶段"></a>发生阶段</h2><blockquote><p>回流：当页面布局和几何信息发生变化的时候。</p></blockquote><p>DOM节点的增加或减少<br>节点位置或尺寸发生变化<br>文本内容发生变化</p><blockquote><p>重绘：更新了元素的绘制属性，但没有改变布局。</p></blockquote><p>背景/字体颜色</p><blockquote><p>注意：回流一定重绘,重绘不一定回流  //emmm…连续一定可导,可导不一定连续</p></blockquote><h2 id="浏览器渲染策略"><a href="#浏览器渲染策略" class="headerlink" title="浏览器渲染策略"></a>浏览器渲染策略</h2><p>由于每次重排都会造成额外的计算消耗，因此大多数浏览器都会通过队列化修改并批量执行来优化重排过程。浏览器会将修改操作放入到队列里，直到过了一段时间或者操作达到了一个阈值，才清空队列。</p><blockquote><p>注意：当你获取布局信息的操作的时候，会强制队列刷新</p></blockquote><p>类似offsetTop、scrollTop、clientTop都会强制刷新队列</p><h2 id="我们的优化策略"><a href="#我们的优化策略" class="headerlink" title="我们的优化策略"></a>我们的优化策略</h2><p>为了减少发生次数，我们可以合并多次对DOM和样式的修改，然后一次处理掉。<br>避免使用获取布局信息的操作<br>频繁发生布局变化的DOM元素如动画,可以考虑使其脱离文档流。<br>使用visibility:hidden替换display:none</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM模式下的算法</title>
      <link href="/2021/08/08/acmFormat/"/>
      <url>/2021/08/08/acmFormat/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于笔试题经常会遇到ACM模式下编程题,JS相关的解法少之又少,以此记录</p></blockquote><h2 id="ACM模式"><a href="#ACM模式" class="headerlink" title="ACM模式"></a>ACM模式</h2><blockquote><p>核心代码模式与其区别在于需要手动处理输入数据与输出数据</p></blockquote><h2 id="单行输入"><a href="#单行输入" class="headerlink" title="单行输入"></a>单行输入</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>计算两数之和</p><p>输入 1 2<br>输出 3</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">let</span> a <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">let</span> b <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>····<br>上面是一个简单的两数之和的加法案例<br>可以确定次题目为单行输入,因此可以调用readLine()方法来读取<br>第一行数据。注意此时读到的数据为字符串类型。因此利用split方法<br>返回一个数组。为了安全起见读到数据后最好加parseInt()方法<br>转成整数类型。 最终的输出可以用print()或者console.log()进行打印。<br>这些API要根据OJ平台具体给出为准。</p><h2 id="多行输入"><a href="#多行输入" class="headerlink" title="多行输入"></a>多行输入</h2><p>如果上述题目改成多组数据输入该如何读取数据？</p><p>输入 1 2<br>     2 3<br>     4 5<br>     …<br>输出 3<br>     5<br>     9</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> first <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">var</span> second <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span>second<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>…<br>此时我们应该利用while来进行循环读取数据,注意终止条件.请看<br>好相关OJ平台对应的退出条件,防止数据异常</p><blockquote><p>注意:每次调用readLine()都会读取输入行,直到全部读取完毕。</p></blockquote><p>OJ平台 <a href="https://www.acmcoder.com/index">赛码网</a><br>       <a href="https://www.nowcoder.com/ta/beginner-programmers">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ACM </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻转二叉树</title>
      <link href="/2021/08/08/reverTree/"/>
      <url>/2021/08/08/reverTree/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="/2021/08/08/reverTree/question.jpg"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote><p>递归 前序遍历</p></blockquote><p>在递归之前将节点左右子树进行调换</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> invertTree <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> root<span class="token punctuation">.</span>left    root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right    root<span class="token punctuation">.</span>right <span class="token operator">=</span> temp    <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token keyword">return</span> root<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>迭代 队列排序</p></blockquote><p>依次将结点入队 队空 返回根</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> invertTree <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> quence <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>quence<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> node <span class="token operator">=</span>  quence<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> temp <span class="token operator">=</span> node<span class="token punctuation">.</span>left      node<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">.</span>right      node<span class="token punctuation">.</span>right <span class="token operator">=</span> temp      <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> quence<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> quence<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> root<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 算法 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2021/08/07/designPatterns/"/>
      <url>/2021/08/07/designPatterns/</url>
      
        <content type="html"><![CDATA[<blockquote><p>把实现同一事情的相同代码，放到一个函数中，以后如果再想实现这个功能，就不需要重新编写这些代码了，只要执行当前的函数即可.</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>writeJs <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"writejs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">"mengzhe"</span> <span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">writeJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">"iceman"</span> <span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">writeJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2021/08/07/designPattern/"/>
      <url>/2021/08/07/designPattern/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一个类仅有一个实例，并提供一个访问它的全局访问点,用一个变量来标志当前是否已经为某个类创建过对象，如果是，则在下一次获取该类的实例时，直接返回之前创建的对象</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> createLoginWindow <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token operator">=</span> title<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> createLoginWindow<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// some code</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> proxySingleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> instance<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">createLoginWindow</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> windowA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">proxySingleton</span><span class="token punctuation">(</span><span class="token string">"login1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> windowB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">proxySingleton</span><span class="token punctuation">(</span><span class="token string">"login2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>windowA <span class="token operator">===</span> windowB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器中缓存</title>
      <link href="/2021/08/07/huancun/"/>
      <url>/2021/08/07/huancun/</url>
      
        <content type="html"><![CDATA[<h2 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h2><ul><li>浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识</li><li>浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中</li></ul><p>以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了，本文也将围绕着这点进行详细分析。为了方便大家理解，这里我们根据是否需要向服务器重新发起HTTP请求将缓存过程分为两个部分，分别是<strong>强制缓存</strong>和<strong>协商缓存</strong> 。</p><h3 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h3><p><strong>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程</strong>，强制缓存的情况主要有三种(暂不分析协商缓存过程)</p><p>1.不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）</p><p>2.存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存.</p><p>3.存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果，</p><blockquote><p>那么强制缓存的缓存规则是什么？</p></blockquote><p>当浏览器向服务器发起请求时，服务器会将缓存规则放入HTTP响应报文的HTTP头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是<strong>Expires</strong>和<strong>Cache-Control</strong>，其中Cache-Control优先级比Expires高。</p><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>Expires是HTTP/1.0控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于Expires的值时，直接使用缓存结果。</p><blockquote><p>Expires是HTTP/1.0的字段，但是现在浏览器默认使用的是HTTP/1.1，那么在HTTP/1.1中网页缓存还是否由Expires控制？</p></blockquote><p>到了HTTP/1.1，Expire已经被Cache-Control替代，原因在于Expires控制缓存的原理是使用客户端的时间与服务端返回的时间做对比，那么如果客户端与服务端的时间因为某些原因（例如时区不同；客户端和服务端有一方的时间不准确）发生误差，那么强制缓存则会直接失效，这样的话强制缓存的存在则毫无意义，那么Cache-Control又是如何控制的呢？</p><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存，主要取值为：</p><ul><li><strong>public</strong>：所有内容都将被缓存（客户端和代理服务器都可缓存）</li><li><strong>private</strong>：所有内容只有客户端可以缓存，<strong>Cache-Control的默认取值</strong></li><li><strong>no-cache</strong>：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定</li><li><strong>no-store</strong>：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存</li><li>**max-age=xxx (xxx is numeric)**：缓存内容将在xxx秒后失效</li></ul><p>from memory cache代表使用内存中的缓存，from disk cache则代表使用的是硬盘中的缓存，浏览器读取缓存的顺序为memory –&gt; disk。</p><p>​       <strong>内存缓存(from memory cache)<strong>：内存缓存具有两个特点，分别是</strong>快速读取</strong>和<strong>时效性</strong>：</p><ul><li><ul><li><strong>快速读取</strong>：内存缓存会将编译解析后的文件，直接存入该进程的内存中，占据该进程一定的内存资源，以方便下次运行使用时的快速读取。</li><li><strong>时效性</strong>：一旦该进程关闭，则该进程的内存则会清空。</li></ul></li></ul><p>​      **硬盘缓存(from disk cache)**：硬盘缓存则是直接将缓存写入硬盘文件中，读取缓存需要对该缓存存放的硬盘文件进行I/O操作，然后重新解析该缓存内容，读取复杂，速度比内存缓存慢。</p><ul><li>在浏览器中，浏览器会在js和图片等文件解析执行后直接存入内存缓存中，那么当刷新页面时只需直接从内存缓存中读取(from memory cache)；而css文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存(from disk cache)。</li></ul><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p><strong>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</strong>，主要有以下两种情况：</p><ul><li><p>协商缓存生效，返回304</p></li><li><p>协商缓存失效，返回200和请求结果结果</p></li></ul><p>同样，协商缓存的标识也是在响应报文的HTTP头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有：<strong>Last-Modified / If-Modified-Since和Etag / If-None-Match</strong>，其中Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高。</p><p>Last-Modified是服务器响应请求时，返回该资源文件在服务器最后被修改的时间。</p><p>If-Modified-Since则是客户端再次发起该请求时，携带上次请求返回的Last-Modified值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有If-Modified-Since字段，则会根据If-Modified-Since的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于If-Modified-Since的字段值，则重新返回资源，状态码为200；否则则返回304，代表资源无更新，可继续使用缓存文件</p><p>Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，如下。</p><p>If-None-Match是客户端再次发起该请求时，携带上次请求返回的唯一标识Etag值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有If-None-Match，则会根据If-None-Match的字段值与该资源在服务器的Etag值做对比，一致则返回304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为200，如下。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>强制缓存优先于协商缓存进行，若强制缓存(Expires和Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回304，继续使用缓存.</p>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指向</title>
      <link href="/2021/08/07/this/"/>
      <url>/2021/08/07/this/</url>
      
        <content type="html"><![CDATA[<h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><h3 id="全局环境下的this"><a href="#全局环境下的this" class="headerlink" title="全局环境下的this"></a>全局环境下的this</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> f1 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> f2 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"use strict"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// window</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种情况相对简单直接，函数在浏览器全局环境中被简单调用，非严格模式下<code>this</code>指向<code>window</code>; 在<code>use strict</code>指明严格模式的情况下就是<code>undefined</code>:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    bar<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    fn<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> fn1 <span class="token operator">=</span> foo<span class="token punctuation">.</span>fn<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里<code>this</code>仍然指向的是<code>window</code>。虽然<code>fn</code>函数在<code>foo</code>对象中作为方法被引用，但是在赋值给<code>fn1</code>之后，<code>fn1</code>的执行仍然是在<code>window</code>的全局环境中。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    bar<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    fn<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>this</code>指向的是最后调用它的对象，在<code>foo.fn()</code>语句中<code>this</code>指向<code>foo</code>对象。请记住：在执行函数时，如果函数中的<code>this</code>是被上一级的对象所调用，那么<code>this</code>指向的就是上一级的对象；否则指向全局环境。</p><h3 id="上下文对象调用中的this"><a href="#上下文对象调用中的this" class="headerlink" title="上下文对象调用中的this"></a>上下文对象调用中的this</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">"Lucas"</span><span class="token punctuation">,</span>    brother<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        name<span class="token punctuation">:</span> <span class="token string">"Mike"</span><span class="token punctuation">,</span>        fn<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>brother<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这种嵌套的关系中，<code>this</code>指向<strong>最后</strong>调用它的对象，因此输出将会是：<code>Mike</code></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> o1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    text<span class="token punctuation">:</span> <span class="token string">"o1"</span><span class="token punctuation">,</span>    fn<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>text    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> o2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    text<span class="token punctuation">:</span> <span class="token string">"o2"</span><span class="token punctuation">,</span>    fn<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> o3 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    text<span class="token punctuation">:</span> <span class="token string">"o3"</span><span class="token punctuation">,</span>    fn<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> fn <span class="token operator">=</span> o1<span class="token punctuation">.</span>fn        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o3<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个 <code>console</code> 最简单，<code>o1</code> 没有问题。难点在第二个和第三个上面，关键还是看调用 <code>this</code> 的那个函数。</p><p>第二个 <code>console</code> 的 <code>o2.fn()</code>，最终还是调用 <code>o1.fn()</code>，因此答案仍然是 <code>o1</code>。</p><p>最后一个，在进行 <code>var fn = o1.fn</code> 赋值之后，是“裸奔”调用，因此这里的 <code>this</code> 指向 <code>window</code>，答案当然是 <code>undefined</code>。</p><h3 id="bind-call-apply-改变-this-指向"><a href="#bind-call-apply-改变-this-指向" class="headerlink" title="bind/call/apply 改变 this 指向"></a>bind/call/apply 改变 this 指向</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">"lucas"</span><span class="token punctuation">,</span>    logName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">"mike"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>logName<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造函数和this"><a href="#构造函数和this" class="headerlink" title="构造函数和this"></a>构造函数和this</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token string">"Lucas"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案将会输出 “Lucas”。但是这样的场景往往伴随着下一个问题：new <strong>操作符调用构造函数，具体做了什么？</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj  <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> Foo<span class="token punctuation">.</span>prototypeFoo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果在构造函数中出现了显式 <code>return</code> 的情况，那么需要注意分为两种场景</p><pre class="line-numbers language-text"><code class="language-text">function Foo()&#123;    this.user = "Lucas"    const o = &#123;&#125;    return o&#125;const instance = new Foo()console.log(instance.user)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将会输出 <code>undefined</code>，此时 <code>instance</code> 是返回的空对象 <code>o</code></p><pre class="line-numbers language-text"><code class="language-text">function Foo()&#123;    this.user = "Lucas"    return 1&#125;const instance = new Foo()console.log(instance.user)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将会输出 <code>Lucas</code>，也就是说此时 <code>instance</code> 是返回的目标对象实例 <code>this</code></p><p><strong>结论：</strong>如果构造函数中显式返回一个值，且返回的是一个对象，那么 <code>this</code> 就指向这个返回的对象；如果返回的不是一个对象，那么 <code>this</code> 仍然指向实例。</p><h3 id="this优先级"><a href="#this优先级" class="headerlink" title="this优先级"></a>this优先级</h3><p>我们常常把通过 <code>call</code>、<code>apply</code>、<code>bind</code>、<code>new</code> 对 <code>this</code> 绑定的情况称为显式绑定；根据调用关系确定的 <code>this</code> 指向称为隐式绑定。</p><p><code>call</code>、<code>apply</code> 的显式绑定一般来说优先级比隐式绑定更高</p><p><strong><code>new</code></strong> <strong>绑定的优先级比显式</strong> <strong><code>bind</code></strong> 绑定更高。</p><p>箭头函数的绑定无法被修改</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型链与继承</title>
      <link href="/2021/08/07/prototype/"/>
      <url>/2021/08/07/prototype/</url>
      
        <content type="html"><![CDATA[<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><h3 id="原型链的查找原则"><a href="#原型链的查找原则" class="headerlink" title="原型链的查找原则"></a>原型链的查找原则</h3><p><img src="/2021/08/07/prototype/proto.jpg"></p><ol><li><p>查找当前实例对象obj，查找obj的属性或方法，找到后返回</p></li><li><p>没有找到，通过<code>obj. __proto__</code>，找到obj构造函数的<code>prototype</code>并且查找上面的属性和方法，找到后返回</p></li><li><p>没有找到，把<code>Object.prototype</code>当做obj，重复以上步骤</p></li><li><p><code>Object.prototype.__proto__ === null</code>，意味着查找结束</p></li></ol><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>我们先创建一个<code>Person</code>类</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> Person <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法定义在构造函数的原型上</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我想创建一个<code>Teacher</code>类，我希望它可以继承<code>Person</code>所有的属性，并且额外添加属于自己特定的属性；</p><p>一个新的属性，subject——这个属性包含了教师教授的学科。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> Teacher <span class="token punctuation">(</span>subject<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subject <span class="token operator">=</span> subject<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>属性的继承是通过在一个类内执行另外一个类的构造函数，通过<code>call</code>指定<code>this</code>为当前执行环境，这样就可以得到另外一个类的所有属性。</p><p>方法如何继承？</p><p>我们都知道类的方法都定义在<code>prototype</code>里，那其实我们只需要把<code>Person.prototype</code>的备份赋值给<code>Teacher.prototype</code>即可</p><pre class="line-numbers language-javascript"><code class="language-javascript">Teacher<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>Teacher<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Teacher<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为如果直接赋值，那会是引用关系，意味着修改<code>Teacher. prototype</code>，也会同时修改<code>Person.prototype</code>，这是不合理的。</p><p>最后还有一个问题，我们都知道<code>prototype</code>里有个属性<code>constructor</code>指向构造函数本身，但是因为我们是复制其他类的<code>prototype</code>，所以这个指向是不对的，需要更正一下。</p><p>如何混合继承？</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     SuperClass<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     OtherSuperClass<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 继承一个类</span>MyClass<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>SuperClass<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 混合其它</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>MyClass<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> OtherSuperClass<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 重新指定constructor</span>MyClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> MyClass<span class="token punctuation">;</span>MyClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myMethod <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// do a thing</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组合寄生继承"><a href="#组合寄生继承" class="headerlink" title="组合寄生继承"></a>组合寄生继承</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> A <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 父类属性</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 父类方法</span> A<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>setName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用此方法进行继承</span><span class="token keyword">var</span> _extends <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span> sup<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 寄生函数</span>    <span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fun<span class="token punctuation">.</span>prototype <span class="token operator">=</span> sup<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 原型链继承</span>    fun<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>contructor <span class="token operator">=</span> sub<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// contructor丢失，恢复</span>    sub<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 寄生函数创建的实例，里面只有原型链(__proto__)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类</span><span class="token keyword">var</span> B <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    A<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 继承属性</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">_extends</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 子类方法</span> B<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">tips<span class="token punctuation">:</span> 如果Teacher<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Person<span class="token punctuation">.</span>prototypeTeacher<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Teacher子类的_proto_和父类的_proto相同  不符合继承因此可以用object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>拷贝一份 或者用组合寄生<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="class继承"><a href="#class继承" class="headerlink" title="class继承"></a>class继承</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>width    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Rectangle</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">constuctor</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span>width    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//覆盖方法</span>    <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>width    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用</span>    <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>输入URL后解析流程</title>
      <link href="/2021/08/07/urlProcess/"/>
      <url>/2021/08/07/urlProcess/</url>
      
        <content type="html"><![CDATA[<h2 id="查找IP"><a href="#查找IP" class="headerlink" title="查找IP"></a>查找IP</h2><blockquote><p>用户通过在地址栏输入一个URL 首先将域名解析定位IP服务器，如果以前没有访问过这个网站 就需要进行DNS查找。因为第一次初始化请求之后，这个IP会缓存一段时间，这样可以在缓存里检索IP地址而不是通过域名服务器进行查找来提高性能。</p></blockquote><h2 id="TCP连接的创建"><a href="#TCP连接的创建" class="headerlink" title="TCP连接的创建"></a>TCP连接的创建</h2><blockquote><p>获取到IP地址后，浏览器会通过TCP三次握手与服务器建立连接，更确切的说是 SYN, SYN-ACK, ACK—因为通过TCP首先发送了三个消息进行协商。这个机制的是用来让两端尝试进行通信—浏览器和服务器在发送数据之前，通过上层协议Https可以协商网络TCP套接字连接的一些参数。</p></blockquote><h2 id="TLS协商"><a href="#TLS协商" class="headerlink" title="TLS协商"></a>TLS协商</h2><blockquote><p>为了在HTTPS上建立安全连接，TLS协商是必须的 ，它决定了什么密码将会被用来加密通信，验证服务器，在进行真实的数据传输之前建立安全连接。在发送真正的请求内容之前还需要三次往返服务器。3+5 八次请求响应 完成连接</p></blockquote><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><blockquote><p>一旦服务器收到请求，它将使用相关的响应头和HTML的内容进行回复。第一个响应包是14kb大小。<br>TCP慢开始<br>在收到初始包之后, 服务器会将下一个包的大小加倍到大约28kb。 后续的包依次是前一个包大小的二倍直到达到预定的阈值，或者遇到拥塞。<br>TCP慢开始逐渐建立适合网络能力的传输速度，以避免拥塞。<br>拥塞控制<br>当服务器用TCP包来发送数据时，客户端通过返回确认帧来确认传输。由于硬件和网络条件，连接的容量是有限的。 如果服务器太快地发送太多的包，它们可能会被丢弃。意味着，将不会有确认帧的返回。服务器把它们当做确认帧丢失。拥塞控制算法来确定发送速率。</p></blockquote><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><blockquote><p>浏览器将通过网络接收的数据转换为DOM和CSSOM的步骤，通过渲染器把DOM和CSSOM在屏幕上绘制成页面<br>（这个过程占用主线程，采用预加载扫描仪减少了阻塞）<br>等待获取CSS或图片不会阻塞HTML的解析或者下载，但是JS会，因为Js经常用于查询元素的CSS属性。当JavaScript解析和执行顺序不重要时，可以添加async属性或defer属性。<br>DOM和CSSOM是两棵树. 它们是独立的数据结构。浏览器将CSS规则转换为可以理解和使用的样式映射。<br>脚本被解析为抽象语法树</p></blockquote><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><blockquote><p>在解析步骤中创建的CSSOM树和DOM树组合成一个Render树，然后用于计算每个可见元素的布局，然后将其绘制到屏幕上。（通过在GPU而不是CPU上绘制屏幕的一部分来提高性能，从而释放主线程。）</p></blockquote><h2 id="光栅化"><a href="#光栅化" class="headerlink" title="光栅化"></a>光栅化</h2><blockquote><p>将页面分成若干层，然后分别对它们进行光栅化，最后在一个单独的线程 - 合成线程（compositor thread）里面合并成一个合成帧，合成的好处在于这个过程没有涉及到主线程，所以合成线程不需要等待样式的计算以及JavaScript完成执行。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三栏布局</title>
      <link href="/2021/08/07/treelayout/"/>
      <url>/2021/08/07/treelayout/</url>
      
        <content type="html"><![CDATA[<h2 id="浮动布局"><a href="#浮动布局" class="headerlink" title="浮动布局"></a>浮动布局</h2><blockquote><p>由于浮动会脱离文档流,注意清除浮动</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>     <span class="token punctuation">.</span>left<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         float<span class="token punctuation">:</span> left<span class="token punctuation">;</span>         width<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>         height<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>         background<span class="token punctuation">:</span> #631D9F<span class="token punctuation">;</span>         overflow<span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token punctuation">.</span>right<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         float<span class="token punctuation">:</span> right<span class="token punctuation">;</span>         width<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>         height<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>         background<span class="token punctuation">:</span> red<span class="token punctuation">;</span>          overflow<span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token punctuation">.</span>center<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         margin<span class="token operator">-</span>left<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>         margin<span class="token operator">-</span>right<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>         background<span class="token operator">-</span>color<span class="token punctuation">:</span> #<span class="token number">4990E2</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"main"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"left"</span><span class="token operator">></span>            Lorem ipsum dolor sit amet<span class="token punctuation">,</span> consectetur adipisicing elit<span class="token punctuation">.</span>             Exercitationem molestias praesentium consequatur illum<span class="token punctuation">.</span>             Inventore repellat dolorem sint beatae ab est voluptates eaque              architecto sit vel rem voluptatum esse vitae fugiat<span class="token punctuation">.</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>            Lorem ipsum dolor sit amet<span class="token punctuation">,</span> consectetur adipisicing elit<span class="token punctuation">.</span>             Nisi quo dolore asperiores cum odit alias repudiandae              id nemo ipsam vitae distinctio illum natus quos eum minus              veritatis eius<span class="token operator">!</span> Impedit animi<span class="token punctuation">.</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>中            <span class="token operator">&lt;</span>span<span class="token operator">></span>Lorem i Eum distinctio   Lorem ipsum dolor sit amet<span class="token punctuation">,</span>             consectetur adipisicing elit<span class="token punctuation">.</span> Odit necessitatibus nulla soluta             similique sed nisi laudantium consequuntur quia animi odio iure             sapiente ipsa at quis quod illum est voluptate dolorem<span class="token punctuation">.</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">></span>        Lorem ipsum dolor sit amet<span class="token punctuation">,</span> consectetur adipisicing elit<span class="token punctuation">.</span>         Ut pariatur cumque iure ab expedita nemo impedit error consectetur          fugit aliquid ullam dicta dolorem neque autem possimus enim sit quos iste<span class="token punctuation">.</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当center中的内容足够多的情况下浮动的不会产生负面影响<br><img src="/2021/08/07/treelayout/float.jpg"></p></blockquote><blockquote><p>但如果不足以撑起足够高度 则会产生叠加态<br><img src="/2021/08/07/treelayout/float2.jpg"></p></blockquote><blockquote><p>此时需要加入清除浮动的css</p></blockquote><hr><p> .main::after{<br>         content:’’;<br>         display: block;<br>         clear: both;<br>     }</p><hr><p>这里采用伪类实现.</p><h2 id="position定位"><a href="#position定位" class="headerlink" title="position定位"></a>position定位</h2><hr><p>position其属性有5种 </p><pre><code>   inherit: 继承父元素的position属性值  static: 默认值，没有定位  fixed: 生成绝对定位的元素,相对于浏览器窗口进行定位（不管屏幕内容怎么滑动,其位置不会改变）  relative:生成相对定位,相对于其正常位置进行定位 absolute:生成绝对定位的元素,相当于static定位以外的第一个父元素进行定位。</code></pre><hr><blockquote><p>根据以上内容我们可以看出我们需要选择给 左 中 右 都使用 absolute 绝对定位，<br>由于absolute 是相当于static定位以外的第一个父元素进行定位，<br>所以我们要给其父元素添加 position:relative属性,<br>这样这三个子元素可以相对于父元素进行绝对定位。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    <span class="token punctuation">.</span>left<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        left<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        width<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>        background<span class="token operator">-</span>color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span>center<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        left<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>        right<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>        background<span class="token operator">-</span>color<span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span>right<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        right<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        width<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>        background<span class="token operator">-</span>color<span class="token punctuation">:</span> #3A2CAC<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span>main<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        position<span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span>article <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"main"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"left"</span><span class="token operator">></span>            Lorem ipsum dolor sit amet<span class="token punctuation">,</span> consectetur adipisicing elit<span class="token punctuation">.</span> Quam magni ea modi ut excepturi temporibus deserunt dolor iusto neque a nobis veniam sunt<span class="token punctuation">.</span> Quaerat deleniti atque harum id voluptate enim<span class="token operator">!</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>中            <span class="token operator">&lt;</span>h2<span class="token operator">></span>绝对定位<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>            Lorem ipsum dolor sit amet<span class="token punctuation">,</span> consectetur adipisicing elit<span class="token punctuation">.</span> Dolorum asperiores tempore sed soluta nihil unde architecto blanditiis distinctio sunt animi neque expedita delectus iure quod quasi accusamus molestiae odit amet<span class="token operator">!</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>绝对定位是脱离文档流的，意味着下面的所有子元素也会脱离文档流，这就导致了这种方法的有效性和可使用性是比较差的。</p></blockquote><h2 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h2><blockquote><p>flex布局负面影响最小解决效果最棒</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>   <span class="token punctuation">.</span>main <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token punctuation">.</span>left<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       flex<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>       background<span class="token operator">-</span>color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token punctuation">.</span>center<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       flex<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span>       background<span class="token operator">-</span>color<span class="token punctuation">:</span> #00FFFF<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token punctuation">.</span>right<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       background<span class="token operator">-</span>color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>       flex<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>     <span class="token operator">&lt;</span>article <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"main"</span><span class="token operator">></span>           <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"left"</span><span class="token operator">></span>               Lorem ipsum dolor sit amet<span class="token punctuation">,</span> consectetur adipisicing elit<span class="token punctuation">.</span> Quam magni ea modi ut excepturi temporibus deserunt dolor iusto neque a nobis veniam sunt<span class="token punctuation">.</span> Quaerat deleniti atque harum id voluptate enim<span class="token operator">!</span>           <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>           <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>               s               Lorem ipsum dolor sit amet<span class="token punctuation">,</span> consectetur adipisicing elit<span class="token punctuation">.</span> Eligendi illo possimus consequuntur totam quas sunt tenetur vel fugiat officiis atque error vitae ducimus nisi minima voluptate assumenda dolor sint unde<span class="token punctuation">.</span>           <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>           <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>               Lorem ipsum dolor sit amet<span class="token punctuation">,</span> consectetur adipisicing elit<span class="token punctuation">.</span> Dolorum asperiores tempore sed soluta nihil unde architecto blanditiis distinctio sunt animi neque expedita delectus iure quod quasi accusamus molestiae odit amet<span class="token operator">!</span>           <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">></span>       <span class="token operator">&lt;</span>footer<span class="token operator">></span>           <span class="token operator">&lt;</span>h1<span class="token operator">></span>ds<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>           Lorem ipsum dolor sit amet<span class="token punctuation">,</span> consectetur adipisicing elit<span class="token punctuation">.</span> Libero possimus repudiandae animi iure temporibus nobis facere vel laudantium at explicabo consectetur nesciunt itaque vero culpa soluta fuga laborum nisi<span class="token punctuation">.</span> Blanditiis<span class="token punctuation">.</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连续子数组和最大值</title>
      <link href="/2021/08/06/minArray/"/>
      <url>/2021/08/06/minArray/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/2021/08/06/minArray/question.jpg"></p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><blockquote><p>暴力循环，设计双指针left,right,使right每移动一次left下标一直累加到right下标<br>每次累加结果进行更新,如果出现小于等于0的情况则left指针直接移动到right指针当前位置<br>并初始化累加和。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">maxsumofSubarray</span><span class="token punctuation">(</span> arr <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>right<span class="token punctuation">;</span>right<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>right<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>left<span class="token punctuation">;</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>left<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sum <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>sum<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                left <span class="token operator">=</span> right                sum <span class="token operator">=</span> <span class="token number">0</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> max<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>动态规划，依次记录每个dp[i],求出dp最大值</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">maxsumofSubarray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> max<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>dp[i]的值记录当前dp表对应下标的最大值，因此状态转移方式为<br>dp[i] = Math.max(dp[i-1]+arr[i],arr[i])</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量提升</title>
      <link href="/2021/08/06/varalbe/"/>
      <url>/2021/08/06/varalbe/</url>
      
        <content type="html"><![CDATA[<blockquote><p>js 并不是在我们定义一个变量的时候，声明完成之后立即赋值，而是把所有用到的变量全部声明之后，再到变量的定义的地方进行赋值，变量的声明的过程就是变量的提升。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>上述代码会被转换为<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a<span class="token punctuation">;</span>  <span class="token keyword">var</span> b<span class="token punctuation">;</span>  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果加入函数后呢？</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>等价于<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a<span class="token punctuation">;</span>  <span class="token keyword">var</span> b<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a()</span>  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b()</span>  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意函数提升优于变量提升</p><blockquote><p>注意：隐式全局变量以及let,const不会存在变量提升</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span>  b <span class="token operator">=</span> <span class="token string">"aaa"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"bbb"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js作用域</title>
      <link href="/2021/08/06/thisTo/"/>
      <url>/2021/08/06/thisTo/</url>
      
        <content type="html"><![CDATA[<h2 id="作用域与查找原则"><a href="#作用域与查找原则" class="headerlink" title="作用域与查找原则"></a>作用域与查找原则</h2><blockquote><p>函数，查找内部之后向上查找</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">            inner <span class="token operator">=</span> <span class="token string">"window"</span><span class="token punctuation">;</span>                        <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inner<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inner<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//window  window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数内部打印inner变量 其中区别为是否有this<br>this的指向需要确定函数的调用者是谁， 这里很清晰为window<br>不含this的inner变量会在函数内部查找是否有inner如果没有则向上查找</p><blockquote><p>对象,查找时跳过内部直接向上查找</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">3</span>  <span class="token comment" spellcheck="true">//对象内部函数调用，变量查找原则为跳出自身属性查找。若要打印自身属性请使用this</span>    <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>        key<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    o<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 3 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里由于函数调用者为o，则this指向o，这里a为对象内部属性<br>由于对象查找原则为跳出对象内部向上查找 因此a=3</p><blockquote><p>对象+函数,作用域为静态作用域即定义时的作用域而非运行时</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">    inner <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token string">"1-1"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            inner<span class="token punctuation">:</span> <span class="token string">"1-2"</span><span class="token punctuation">,</span>            say<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inner<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inner<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于函数为立即执行函数，并且返回一个对象因此如果打印obj1会得到<br>{<br>    inner:’1-2’<br>    say:function(){}<br>}<br>此时this指向为obj1所以this.inner为1-2<br>另一个inner为对象内部调用方法，会跳出当前对象内部向上查找<br>但由于静态作用域在对象外部有inner变量因此不会查找到window<br>因此inner为1-1</p><blockquote><p>考虑一下下面的输出</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">    inner <span class="token operator">=</span> <span class="token string">"window"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inner<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token string">"1-1"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            inner<span class="token punctuation">:</span> <span class="token string">"1-2"</span><span class="token punctuation">,</span>            say<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inner<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inner<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj1<span class="token punctuation">.</span>say <span class="token operator">=</span> say<span class="token punctuation">;</span>    obj1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交换链表中节点</title>
      <link href="/2021/08/05/changeChine/"/>
      <url>/2021/08/05/changeChine/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="/images/pic.jpg"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="/images/process.jpg"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> swapPairs <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">let</span> prev <span class="token operator">=</span> dummy<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 临时保存head.next，因为head.next待会要改变</span>    head<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>      prev <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 指针更新</span>    head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指针更新</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>创建哑结点 dummyHead，令 dummyHead.next = head。令 temp 表示当前到达的节点，<br>初始时 temp = dummyHead。每次需要交换 temp 后面的两个节点。<br>如果 temp 的后面没有节点或者只有一个节点，则没有更多的节点需要交换，因此结束交换。<br>否则，获得 temp 后面的两个节点 node1 和 node2，通过更新节点的指针关系实现两两交换节点。<br>具体而言，交换之前的节点关系是 temp -&gt; node1 -&gt; node2，<br>交换之后的节点关系要变成 temp -&gt; node2 -&gt; node1，因此需要进行如下操作</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由原理</title>
      <link href="/2021/08/05/hello-world/"/>
      <url>/2021/08/05/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h2><blockquote><p>hash模式</p></blockquote><p>随着 ajax 的流行，异步数据请求交互运行在不刷新浏览器的情况下进行。而异步交互体验的更高级版本就是 SPA —— 单页应用。单页应用不仅仅是在页面交互是无刷新的，连页面跳转都是无刷新的，为了实现单页应用，所以就有了前端路由。<br>类似于服务端路由，前端路由实现起来其实也很简单，就是匹配不同的 url 路径，进行解析，然后动态的渲染出区域 html 内容。但是这样存在一个问题，就是 url 每次变化的时候，都会造成页面的刷新。那解决问题的思路便是在改变 url 的情况下，保证页面的不刷新。在 2014 年之前，大家是通过 hash 来实现路由，url hash 就是类似于：<br><a href="http://www.xxx.com/#/login">http://www.xxx.com/#/login</a><br>这种 #。后面 hash 值的变化，并不会导致浏览器向服务器发出请求，浏览器不发出请求，也就不会刷新页面。另外每次 hash 值的变化，还会触发<code>hashchange</code> 这个事件，通过这个事件我们就可以知道 hash 值发生了哪些变化。然后我们便可以监听<code>hashchange</code>来实现更新页面部分内容的操作：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> matchAndUpdate <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// todo 匹配 hash 做 dom 更新操作</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> matchAndUpdate<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>history模式</p></blockquote><p>因为 HTML5 标准发布。多了两个 API，<code>pushState</code> 和 <code>replaceState</code>，<br>通过这两个 API 可以改变 url 地址且不会发送请求。同时还有<code>popstate</code> 事件。<br>通过这些就能用另一种方式来实现前端路由了，但原理都是跟 hash 实现相同的。<br>用了 HTML5 的实现，单页路由的 url 就不会多出一个#，变得更加美观。但因为没有 # 号，<br>所以当用户刷新页面之类的操作时，浏览器还是会给服务器发送请求。<br>为了避免出现这种情况，所以这个实现需要服务器的支持，需要把所有路由都重定向到根页面。</p>]]></content>
      
      
      <categories>
          
          <category> router </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS执行流程</title>
      <link href="/2021/08/05/article-title/"/>
      <url>/2021/08/05/article-title/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>当javascript代码执行的时候会将不同的变量放在堆（heap）和栈（stack）中来加以区分。其中，堆里存放着一些对象。而栈中则存放着一些基础类型变量以及对象的引用。 </p></blockquote><blockquote><p>js 在执行可执行的脚本时，每当执行到一个函数调用时都会创建一个可执行上下文（execution context）EC。由于存在很多可执行上下文，所以 Js 引擎创建了执行栈来管理执行上下文。当函数调用完成，js会退出这个执行环境并把这个执行环境销毁，回到上一个方法的执行环境,这个过程反复进行，直到执行栈中的代码全部执行完毕:</p></blockquote><blockquote><p>当js引擎遇到一个异步事件后，不会一直等到异步事件的返回，而是先将异步事件进行挂起。等到异步事件执行完毕后，会被加入到事件队列中。（注意，此时只是异步事件执行完成，其中的回调函数并没有去执行。）当执行栈执行完毕，主线程处于闲置状态时，会去异步队列那抽取最先被推入队列中的异步事件，放入执行栈中，执行其中的回调同步代码。如此反复，这样就形成了一个无限的循环。</p></blockquote><blockquote><p>当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行。</p></blockquote><p>nextTick在执行栈之后任务队列之前。setImmediate在任务队列之后</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果是3 4 6 8 7 5 2 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树摇原理</title>
      <link href="/2021/08/05/text/"/>
      <url>/2021/08/05/text/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p>由于tree-shaking主要还是为了减少页面的加载时间，将无用的代码删除，减少js包的大小，<br>从而减少用户等待的时间，使用户不因为漫长的等待而离开。</p></blockquote><hr><p>tree-shaking 都是因为 ES6 modules 的静态特性才得以实现的。</p><p>只能作为模块顶层的语句出现，不能出现在 function 里面或是 if 里面</p><p>不管 import 的语句出现的位置在哪里，在模块初始化的时候所有的 import 都必须已经导入完成。</p><p>以上几点保证了 ES6 modules 的依赖关系是确定 ，和运行时的状态无关，<br>从而也就保证了 ES6 modules 是可以进行可靠的静态分析的代码而言，<br>要做到高效的按需使用，不能等到代码执行了才知道模块的依赖，<br>必须要从模块的静态分析入手。</p><p>找到你整个代码里真正使用的代码，打包进去，那么没用的代码自然就剔除了。<br>主要利用到es6的模块特性，tree shaking首先会分析文件项目里具体哪些代码被引入了，<br>哪些没有引入，然后将真正引入的代码打包进去，最后没有使用到的代码自然就不会存在了。</p>]]></content>
      
      
      <categories>
          
          <category> 构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
